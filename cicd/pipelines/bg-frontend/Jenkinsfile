#!groovy

timeout(time: 60, unit: 'MINUTES'){
	node {
	
	// Wait until authorization to push to production
    stage('Approve QA Deployment') {
        timeout(time: 2, unit: 'DAYS') {
            input message: 'Do you want to deploy into QA?'
        }
    }
	
	stage("Choose Version") {
        env.version = selectVersion("parking", "dev-", "dev");
    }
	
    // Publish to a QA environment
    stage('Deploy to QA') {
		sh "oc project test"
		openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: 'parking', destTag: "qa-${version}", destinationAuthToken: '', destinationNamespace: 'dev', namespace: 'dev', srcStream: 'parking', srcTag: "dev-${version}", verbose: 'false'
		sh "oc patch dc parking-qa --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"parking-qa\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"dev\", \"name\": \"parking:qa-$version\"}}}]}}' -n test"
        openshiftDeploy apiURL: '', authToken: '', depCfg: 'parking-qa', namespace: 'test', verbose: 'false', waitTime: ''
        openshiftVerifyDeployment apiURL: '', authToken: '', depCfg: 'parking-qa', namespace: 'test', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: ''

        openshiftTag alias: 'false', apiURL: '', authToken: '', destStream: 'parking', destTag: "prod-$version", destinationAuthToken: '', destinationNamespace: 'dev', namespace: 'dev', srcStream: 'parking', srcTag: "qa-$version", verbose: 'false'
    }
    // Wait until authorization to push to production
    stage('Approve Production Deployment') {
        timeout(time: 2, unit: 'DAYS') {
            input message: 'Do you want to deploy into production?'
        }
    }
    // Push to production
	def dest = "app-green"
    def active = ""
    stage('Deploy to Production') {
		sh "oc project prod"
		sh "oc get route blue-green -n prod -o jsonpath='{ .spec.to.name }' > active"
        active = readFile("active").trim()
        if (active == "app-green")
            dest = "app-blue"
		
		sh "oc patch dc ${dest} --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"$dest\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"dev\", \"name\": \"parking:prod-$version\"}}}]}}' -n prod"
        openshiftDeploy apiURL: '', authToken: '', depCfg: dest, namespace: 'prod', verbose: 'false', waitTime: ''
        openshiftVerifyDeployment apiURL: '', authToken: '', depCfg: dest, namespace: 'prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: ''
    }
	
	stage("Switch Version?") {
        input "Switch to new version?"
    }
	sh "oc patch route blue-green -n prod -p '{ \"spec\" : { \"to\" : { \"name\" : \"$dest\" } } }'"
	
	stage("Finish Deployment") {
        rollback = input message: "Rollback to previous version?",
        parameters: [choice(choices: "Yes\nNo", description: '', name: 'Rollback')]
    }

	if (rollback.equals('Yes')) {
		sh "oc patch route blue-green -n prod -p '{ \"spec\" : { \"to\" : {\"name\" : \"$active\" } } }'"
		echo "Deployment rolled back successfully"
	} else {
		echo "Deployment finished successfully"
	}
	}
}

def selectVersion(imageName, tagPrefix, namespace) {
    def selectedTag = ""
    sh "oc get istag -n ${namespace} --sort-by='{.metadata.name}'| grep ${imageName}| grep ${tagPrefix} | awk '{print \$1}' | awk -F ':' '{print \$2}' | awk -F '-' '{print \$2}' | tail -5 > tags"
    def tags = readFile("tags").trim()
    selectedTag = input message: "Choose version",
            parameters: [choice(choices: tags, description: '', name: 'Versions')]
    return selectedTag
}
